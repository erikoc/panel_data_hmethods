filter(all(complete.cases(across(variables)))) %>%
pull(wbcode) %>%
unique()
length(complete_wbcode_dp)
print(complete_wbcode_dp)
complete_dta_dp <- merged_data %>%
filter(wbcode %in% complete_wbcode_dp) %>%
filter(year >= threshold_year)
n <- as.numeric(length(unique(complete_dta_dp$wbcode)))
T <- as.numeric(length(unique(complete_dta_dp$year)))
l.d.gdp.dy <- diff(log(matrix(complete_dta_dp$gdp, T, n)))
dem.dy <- matrix(complete_dta_dp$dem[-1], T-1, n)
Eup.fit.1 <- Eup(l.d.gdp.dy ~ dem.dy + lag(l.d.gdp.dy, 1) - 1,
additive.effects = "twoways", dim.criterion = "PC1")
Eup.fit.2 <- Eup(l.d.gdp.dy ~ dem.dy + lag(l.d.gdp.dy, 1) + lag(l.d.gdp.dy, 2)  - 1,
additive.effects = "twoways", dim.criterion = "PC1")
Eup.fit.3 <- Eup(l.d.gdp.dy ~ dem.dy + lag(l.d.gdp.dy, 1) + lag(l.d.gdp.dy, 2) + lag(l.d.gdp.dy, 3) - 1,
additive.effects = "twoways", dim.criterion = "PC1")
Eup.fit.4 <- Eup(l.d.gdp.dy ~ dem.dy + lag(l.d.gdp.dy, 1) + lag(l.d.gdp.dy, 2) + lag(l.d.gdp.dy, 3) + lag(l.d.gdp.dy, 4) - 1,
additive.effects = "twoways", dim.criterion = "PC1")
Eup.sum1 <-summary(Eup.fit.1, error.type = 5)
print(Eup.sum1)
Eup.sum2 <-summary(Eup.fit.2, error.type = 5)
print(Eup.sum2)
Eup.sum3 <-summary(Eup.fit.3, error.type = 5)
print(Eup.sum3)
Eup.sum4 <-summary(Eup.fit.4, error.type = 5)
print(Eup.sum4)
plot(Eup.sum4)
library(boot)
# Create a list of data frames, each one representing a single country
country_list <- split(complete_dta_dp, complete_dta_dp$wbcode)
# Define a wrapper function for Eup
KSSdyWrapper <- function(data_list, indices) {
d <- do.call(rbind, data_list[indices])
l.gdp.dy <- log(matrix(d$gdp, T, n))
dem.dy.2 <- matrix(d$dem, T, n)
KSS.fit <- KSS(l.gdp.dy ~ dem.dy.2 + lag(l.gdp.dy, 1) + lag(l.gdp.dy, 2) + lag(l.gdp.dy, 3) + lag(l.gdp.dy, 4) - 1,
additive.effects = "twoways", factor.dim = 6, CV = TRUE)
return(KSS.fit$slope.para)  # Return the coefficients of the Eup model
}
# Run bootstrap using boot function
boot_results_KSSdy <- boot(country_list, KSSdyWrapper, R = 1000, stype = "i")
boot_results_KSSdy
plot(boot_results_KSSdy)
boot_cis <- lapply(1:5, function(i) boot.ci(boot.out = boot_results_KSSdy, index = i, type = c("norm", "perc", "bca")))
boot_cis
# Load the TOSTER library
library(TOSTER)
# Set equivalence bounds
lower_bound <- -0.2
upper_bound <- 0.2
# Extract the bootstrap estimates for 'dem'
dem_bootstrap_estimates <- boot_results_KSSdy$t[, 1]
# Calculate the mean and standard deviation
mean_estimate <- mean(dem_bootstrap_estimates)
sd_estimate <- sd(dem_bootstrap_estimates)
# Perform the TOST procedure
tost_result <- TOSTone(m = mean_estimate, mu = 0, sd = sd_estimate, n = length(dem_bootstrap_estimates), low_eqbound_d = lower_bound, high_eqbound_d = upper_bound)
# Print the result
print(tost_result)
knitr::opts_chunk$set(echo = TRUE)
source("sim_dgp_fn.R")
source("sim_montecarlo_fn.R")
n <- 100
T <- 30
beta <- c(0.5,0.5)
X <- generate_X(T,n)
stopifnot(dim(X) == c(T*n,2))
X_shifted <- shift_mean(X, T, n)
stopifnot(dim(X_shifted) == c(T*n,2))
X <- shift_mean(X, T,n)
group_size <- n*T/3
colMeans(X[1:group_size,])
colMeans(X[(1 + group_size):(2*group_size),])
colMeans(X[(1+ 2*group_size):(3*group_size),])
# 0. Generate vectors of interest
v_list <- list()
V_list <- list(V1 = generate_V1(T, n),
V2 = generate_V2(T, n),
V3 = generate_V3(T, n),
V4 = generate_V4(T, n),
V5 = generate_V5(T, n),
V6 = generate_V6(T, n))
# 1. Perform the length and NA checks using a loop
for (i in 1:length(V_list)) {
stopifnot(length(V_list[[i]]) == T*n)
stopifnot(!anyNA(V_list[[i]]))
}
# 2. Checking that the time-varying effects are correctly specified
for (i in 1:length(V_list)) {
interval <- sample(0:(n-1), 1)
start <- interval * T + 1
end <- (interval + 1) * T
plot(1:T, V_list[[i]][start:end], type = "l", xlab = "Time", ylab = "Individual Effects",
main = paste("Individual Effects (V",i,") over Time - Interval:", interval))
}
X <- generate_X(T, n)
X <- shift_mean(X, T, n)
DGP = "K2"
# Create individual effects according to specified DGP
if (DGP == "K1") {
V <- generate_V1(T, n)
} else if (DGP == "K2") {
V <- generate_V2(T, n)
} else if (DGP == "K3") {
V <- generate_V3(T, n)
} else if (DGP == "K4") {
V <- generate_V4(T, n)
}
# Create endogenous regressors, when specified
endogenous = TRUE
if (endogenous) {
X <- endogenous_X(T, n, X, V)
}
cor(X,V)
# 1. Homoskedastic
e <- generate_panel_errors(T, n, X, error = "homo")
plot(e[1:T], type = "p", xlab = "Observation", ylab = "Error", main = "Panel Errors")
# 2. Heteroskedastic
e <- generate_panel_errors(T, n, X, error = "hetero_time")
plot(e[1:T], type = "p", xlab = "Observation", ylab = "Error", main = "Panel Errors")
e <- generate_panel_errors(T, n, X, error = "hetero_individual")
plot(e[1:n], type = "p", xlab = "Observation", ylab = "Error", main = "Panel Errors")
e <- generate_panel_errors(T, n, X, error = "hetero_both")
plot(e[1:T], type = "p", xlab = "Observation", ylab = "Error", main = "Panel Errors")
e <- generate_panel_errors(T, n, X, error = "hetero_both")
plot(e[1:n], type = "p", xlab = "Observation", ylab = "Error", main = "Panel Errors")
# 2. Autocorrelated errors
e <- generate_panel_errors(T, n, X, error = "autocorr", rho = 0.8)
plot(e[1:T], type = "l", xlab = "Observation", ylab = "Error", main = "Panel Errors")
n <- 300
T <- 30
X <- generate_X(T, n)
X <- shift_mean(X, T, n)
DGP = "K4"
# Create individual effects according to specified DGP
if (DGP == "K1") {
V <- generate_V1(T, n)
} else if (DGP == "K2") {
V <- generate_V2(T, n)
} else if (DGP == "K3") {
V <- generate_V3(T, n)
} else if (DGP == "K4") {
V <- generate_V4(T, n)
}
e <- generate_panel_errors(T, n, X, error = "homo")
Y <- X %*% beta + V + e
create_plm_data(T, n, Y, X, V)
library(plm)
n <- 30
T <- 12
beta <- c(0.5,0.5)
data <- DataGeneratingFunction(T, n, beta = beta, DGP = "K1" , endogenous = FALSE, error = "hetero_both", rho = 0.5)
data_plm <- data[["plm"]]
data_Tn <-  data[["Tn"]]
#KSS.fit <- KSS(data_Tn$Y ~ data_Tn$X_1 + data_Tn$X_2 -1, CV = TRUE, consult.dim.crit =  TRUE)
#summary(KSS.fit)
#plot(summary(KSS.fit))
Eup.fit <- Eup(data_Tn$Y ~ data_Tn$X_1 + data_Tn$X_2 -1, dim.criterion = "PC1")
summary(Eup.fit)
plot(summary(Eup.fit))
plm_fit <- plm(data_plm$Y ~ data_plm$X_1 + data_plm$X_2 -1, data = data_plm,  model = "within")
summary(plm_fit)
?Eup
library(plm)
n <- 30
T <- 12
beta <- c(0.5,0.5)
data <- DataGeneratingFunction(T, n, beta = beta, DGP = "K1" , endogenous = FALSE, error = "hetero_both", rho = 0.5)
data_plm <- data[["plm"]]
data_Tn <-  data[["Tn"]]
#KSS.fit <- KSS(data_Tn$Y ~ data_Tn$X_1 + data_Tn$X_2 -1, CV = TRUE, consult.dim.crit =  TRUE)
#summary(KSS.fit)
#plot(summary(KSS.fit))
Eup.fit <- Eup(data_Tn$Y ~ data_Tn$X_1 + data_Tn$X_2 -1, dim.criterion = "PC1", d.max = 5)
summary(Eup.fit)
plot(summary(Eup.fit))
plm_fit <- plm(data_plm$Y ~ data_plm$X_1 + data_plm$X_2 -1, data = data_plm,  model = "within")
summary(plm_fit)
library(plm)
n <- 30
T <- 12
beta <- c(0.5,0.5)
data <- DataGeneratingFunction(T, n, beta = beta, DGP = "K1" , endogenous = FALSE, error = "hetero_both", rho = 0.5)
data_plm <- data[["plm"]]
data_Tn <-  data[["Tn"]]
#KSS.fit <- KSS(data_Tn$Y ~ data_Tn$X_1 + data_Tn$X_2 -1, CV = TRUE, consult.dim.crit =  TRUE)
#summary(KSS.fit)
#plot(summary(KSS.fit))
Eup.fit <- Eup(data_Tn$Y ~ data_Tn$X_1 + data_Tn$X_2 -1, dim.criterion = "PC1", d.max = 10)
summary(Eup.fit)
plot(summary(Eup.fit))
plm_fit <- plm(data_plm$Y ~ data_plm$X_1 + data_plm$X_2 -1, data = data_plm,  model = "within")
summary(plm_fit)
library(plm)
n <- 30
T <- 12
beta <- c(0.5,0.5)
data <- DataGeneratingFunction(T, n, beta = beta, DGP = "K1" , endogenous = FALSE, error = "hetero_both", rho = 0.5)
data_plm <- data[["plm"]]
data_Tn <-  data[["Tn"]]
#KSS.fit <- KSS(data_Tn$Y ~ data_Tn$X_1 + data_Tn$X_2 -1, CV = TRUE, consult.dim.crit =  TRUE)
#summary(KSS.fit)
#plot(summary(KSS.fit))
Eup.fit <- Eup(data_Tn$Y ~ data_Tn$X_1 + data_Tn$X_2 -1, dim.criterion = "PC1", d.max = 5)
summary(Eup.fit)
plot(summary(Eup.fit))
plm_fit <- plm(data_plm$Y ~ data_plm$X_1 + data_plm$X_2 -1, data = data_plm,  model = "within")
summary(plm_fit)
library(plm)
n <- 30
T <- 12
beta <- c(0.5,0.5)
data <- DataGeneratingFunction(T, n, beta = beta, DGP = "K1" , endogenous = FALSE, error = "hetero_both", rho = 0.5)
data_plm <- data[["plm"]]
data_Tn <-  data[["Tn"]]
#KSS.fit <- KSS(data_Tn$Y ~ data_Tn$X_1 + data_Tn$X_2 -1, CV = TRUE, consult.dim.crit =  TRUE)
#summary(KSS.fit)
#plot(summary(KSS.fit))
Eup.fit <- Eup(data_Tn$Y ~ data_Tn$X_1 + data_Tn$X_2 -1, dim.criterion = "PC1", d.max = 5)
summary(Eup.fit)
plot(summary(Eup.fit))
plm_fit <- plm(data_plm$Y ~ data_plm$X_1 + data_plm$X_2 -1, data = data_plm,  model = "within")
summary(plm_fit)
library(plm)
n <- 30
T <- 12
beta <- c(0.5,0.5)
data <- DataGeneratingFunction(T, n, beta = beta, DGP = "K1" , endogenous = FALSE, error = "hetero_both", rho = 0.5)
data_plm <- data[["plm"]]
data_Tn <-  data[["Tn"]]
#KSS.fit <- KSS(data_Tn$Y ~ data_Tn$X_1 + data_Tn$X_2 -1, CV = TRUE, consult.dim.crit =  TRUE)
#summary(KSS.fit)
#plot(summary(KSS.fit))
Eup.fit <- Eup(data_Tn$Y ~ data_Tn$X_1 + data_Tn$X_2 -1, dim.criterion = "PC1", d.max = 10)
summary(Eup.fit)
plot(summary(Eup.fit))
plm_fit <- plm(data_plm$Y ~ data_plm$X_1 + data_plm$X_2 -1, data = data_plm,  model = "within")
summary(plm_fit)
library(plm)
n <- 30
T <- 12
beta <- c(0.5,0.5)
data <- DataGeneratingFunction(T, n, beta = beta, DGP = "K1" , endogenous = FALSE, error = "hetero_both", rho = 0.5)
data_plm <- data[["plm"]]
data_Tn <-  data[["Tn"]]
#KSS.fit <- KSS(data_Tn$Y ~ data_Tn$X_1 + data_Tn$X_2 -1, CV = TRUE, consult.dim.crit =  TRUE)
#summary(KSS.fit)
#plot(summary(KSS.fit))
Eup.fit <- Eup(data_Tn$Y ~ data_Tn$X_1 + data_Tn$X_2 -1, dim.criterion = "PC1", d.max = 6)
summary(Eup.fit)
plot(summary(Eup.fit))
plm_fit <- plm(data_plm$Y ~ data_plm$X_1 + data_plm$X_2 -1, data = data_plm,  model = "within")
summary(plm_fit)
source("sim_dgp_fn.R")
source("sim_montecarlo_fn.R")
n <- 30
T <- 12
beta <- c(0.5,0.5)
nsim <- 10
timing <- system.time({results <- doMonteCarlo(nsim, T, n, beta = beta, DGP = "K1" , endogenous = FALSE, error = "hetero_time", rho = 0.5)})
print(timing)
library(plm)
n <- 30
T <- 12
beta <- c(0.5,0.5)
data <- DataGeneratingFunction(T, n, beta = beta, DGP = "K1" , endogenous = FALSE, error = "autocorr", rho = 0.5)
data_plm <- data[["plm"]]
data_Tn <-  data[["Tn"]]
#KSS.fit <- KSS(data_Tn$Y ~ data_Tn$X_1 + data_Tn$X_2 -1, CV = TRUE, consult.dim.crit =  TRUE)
#summary(KSS.fit)
#plot(summary(KSS.fit))
Eup.fit <- Eup(data_Tn$Y ~ data_Tn$X_1 + data_Tn$X_2 -1, dim.criterion = "PC1", d.max = 6)
summary(Eup.fit)
plot(summary(Eup.fit))
plm_fit <- plm(data_plm$Y ~ data_plm$X_1 + data_plm$X_2 -1, data = data_plm,  model = "within")
summary(plm_fit)
oeftest(plm_fit, vcov = vcovHC(model, type = "sss"))
library(plm)
n <- 30
T <- 12
beta <- c(0.5,0.5)
data <- DataGeneratingFunction(T, n, beta = beta, DGP = "K1" , endogenous = FALSE, error = "autocorr", rho = 0.5)
data_plm <- data[["plm"]]
data_Tn <-  data[["Tn"]]
#KSS.fit <- KSS(data_Tn$Y ~ data_Tn$X_1 + data_Tn$X_2 -1, CV = TRUE, consult.dim.crit =  TRUE)
#summary(KSS.fit)
#plot(summary(KSS.fit))
Eup.fit <- Eup(data_Tn$Y ~ data_Tn$X_1 + data_Tn$X_2 -1, dim.criterion = "PC1", d.max = 6)
summary(Eup.fit)
plot(summary(Eup.fit))
plm_fit <- plm(data_plm$Y ~ data_plm$X_1 + data_plm$X_2 -1, data = data_plm,  model = "within")
summary(plm_fit)
coeftest(plm_fit, vcov = vcovHC(model, type = "sss"))
install.packages("lmtest")
install.packages("lmtest")
library(plm)
library(lmtest)
n <- 30
T <- 12
beta <- c(0.5,0.5)
data <- DataGeneratingFunction(T, n, beta = beta, DGP = "K1" , endogenous = FALSE, error = "autocorr", rho = 0.5)
data_plm <- data[["plm"]]
data_Tn <-  data[["Tn"]]
#KSS.fit <- KSS(data_Tn$Y ~ data_Tn$X_1 + data_Tn$X_2 -1, CV = TRUE, consult.dim.crit =  TRUE)
#summary(KSS.fit)
#plot(summary(KSS.fit))
Eup.fit <- Eup(data_Tn$Y ~ data_Tn$X_1 + data_Tn$X_2 -1, dim.criterion = "PC1", d.max = 6)
summary(Eup.fit)
plot(summary(Eup.fit))
plm_fit <- plm(data_plm$Y ~ data_plm$X_1 + data_plm$X_2 -1, data = data_plm,  model = "within")
summary(plm_fit)
coeftest(plm_fit, vcov = vcovHC(model, type = "sss"))
library(plm)
library(lmtest)
n <- 30
T <- 12
beta <- c(0.5,0.5)
data <- DataGeneratingFunction(T, n, beta = beta, DGP = "K1" , endogenous = FALSE, error = "autocorr", rho = 0.5)
data_plm <- data[["plm"]]
data_Tn <-  data[["Tn"]]
#KSS.fit <- KSS(data_Tn$Y ~ data_Tn$X_1 + data_Tn$X_2 -1, CV = TRUE, consult.dim.crit =  TRUE)
#summary(KSS.fit)
#plot(summary(KSS.fit))
Eup.fit <- Eup(data_Tn$Y ~ data_Tn$X_1 + data_Tn$X_2 -1, dim.criterion = "PC1", d.max = 6)
summary(Eup.fit)
plot(summary(Eup.fit))
plm_fit <- plm(data_plm$Y ~ data_plm$X_1 + data_plm$X_2 -1, data = data_plm,  model = "within")
summary(plm_fit)
coeftest(plm_fit, vcov = vcovHC(plm_fit, type = "sss"))
?coeftest
library(plm)
library(lmtest)
n <- 30
T <- 12
beta <- c(0.5,0.5)
data <- DataGeneratingFunction(T, n, beta = beta, DGP = "K1" , endogenous = FALSE, error = "autocorr", rho = 0.5)
data_plm <- data[["plm"]]
data_Tn <-  data[["Tn"]]
#KSS.fit <- KSS(data_Tn$Y ~ data_Tn$X_1 + data_Tn$X_2 -1, CV = TRUE, consult.dim.crit =  TRUE)
#summary(KSS.fit)
#plot(summary(KSS.fit))
Eup.fit <- Eup(data_Tn$Y ~ data_Tn$X_1 + data_Tn$X_2 -1, dim.criterion = "PC1", d.max = 6)
summary(Eup.fit)
plot(summary(Eup.fit))
plm_fit <- plm(data_plm$Y ~ data_plm$X_1 + data_plm$X_2 -1, data = data_plm,  model = "within")
summary(plm_fit)
#coeftest(plm_fit, vcov = vcovHC(plm_fit, type = "sss"))
coeftest(plm_fit, vcov=vcovHC(plm_fit,type="HC0",cluster="group"))
coeftest(plm_fit, vcov = vcovHC(plm_fit, type = "sss"))
coeftest(plm_fit, vcov = vcovSCC(plm_fit, type = "CR1"))
coeftest(plm_fit, vcov = vcovSCC(plm_fit, type = "sss"))
coeftest(plm_fit, vcov = vcovHC(plm_fit, type = "sss"))
coeftest(plm_fit, vcov=vcovHC(plm_fit,type="sss",cluster="group"))
source("sim_dgp_fn.R")
source("sim_montecarlo_fn.R")
source("sim_dgp_fn.R")
source("sim_montecarlo_fn.R")
n <- 30
T <- 12
beta <- c(0.5,0.5)
nsim <- 10
timing <- system.time({results <- doMonteCarlo(nsim, T, n, beta = beta, DGP = "K1" , endogenous = FALSE, error = "hetero_time", rho = 0.5)})
source("sim_dgp_fn.R")
source("sim_montecarlo_fn.R")
n <- 30
T <- 12
beta <- c(0.5,0.5)
nsim <- 10
timing <- system.time({results <- doMonteCarlo(nsim, T, n, beta = beta, DGP = "K1" , endogenous = FALSE, error = "hetero_time", rho = 0.5)})
print(timing)
library(plm)
library(lmtest)
n <- 30
T <- 12
beta <- c(0.5,0.5)
data <- DataGeneratingFunction(T, n, beta = beta, DGP = "K1" , endogenous = FALSE, error = "autocorr", rho = 0.5)
data_plm <- data[["plm"]]
data_Tn <-  data[["Tn"]]
KSS.fit <- KSS(data_Tn$Y ~ data_Tn$X_1 + data_Tn$X_2 -1, CV = TRUE, consult.dim.crit =  TRUE)
summary(KSS.fit)
plot(summary(KSS.fit))
Eup.fit <- Eup(data_Tn$Y ~ data_Tn$X_1 + data_Tn$X_2 -1, dim.criterion = "PC1", d.max = 6)
summary(Eup.fit)
plot(summary(Eup.fit))
plm_fit <- plm(data_plm$Y ~ data_plm$X_1 + data_plm$X_2 -1, data = data_plm,  model = "within")
summary(plm_fit)
#coeftest(plm_fit, vcov = vcovHC(plm_fit, type = "sss"))
coeftest(plm_fit, vcov=vcovHC(plm_fit,type="HC0",cluster="group"))
KSS.fit$slope.para
summary(KSS.fit)
sum <- summary(KSS.fit)
sum$coefficients[1,4]
sum$coefficients[2,4]
plm_fit$coefficients
source("sim_dgp_fn.R")
source("sim_montecarlo_fn.R")
n <- 30
T <- 12
beta <- c(0.5,0.5)
nsim <- 10
timing <- system.time({results <- doMonteCarlo(nsim, T, n, beta = beta, DGP = "K1" , endogenous = FALSE, error = "hetero_time", rho = 0.5)})
print(timing)
mean(results$KSS)
mean(results$KSS$size1)
source("sim_dgp_fn.R")
source("sim_montecarlo_fn.R")
n <- 30
T <- 12
beta <- c(0.5,0.5)
nsim <- 10
timing <- system.time({results <- doMonteCarlo(nsim, T, n, beta = beta, DGP = "K1" , endogenous = FALSE, error = "hetero_time", rho = 0.5)})
print(timing)
# 1. Homoskedastic
e <- generate_panel_errors(T, n, X, error = "homo")
plot(e[1:T], type = "p", xlab = "Observation", ylab = "Error", main = "Panel Errors")
# 2. Heteroskedastic
e <- generate_panel_errors(T, n, X, error = "hetero_time")
plot(e[1:T], type = "p", xlab = "Observation", ylab = "Error", main = "Panel Errors")
e <- generate_panel_errors(T, n, X, error = "hetero_individual")
plot(e[1:n], type = "p", xlab = "Observation", ylab = "Error", main = "Panel Errors")
e <- generate_panel_errors(T, n, X, error = "hetero_both")
plot(e[1:T], type = "p", xlab = "Observation", ylab = "Error", main = "Panel Errors")
e <- generate_panel_errors(T, n, X, error = "hetero_both")
plot(e[1:n], type = "p", xlab = "Observation", ylab = "Error", main = "Panel Errors")
# 2. Autocorrelated errors
e <- generate_panel_errors(T, n, X, error = "autocorr", rho = 0.8)
plot(e[1:T], type = "l", xlab = "Observation", ylab = "Error", main = "Panel Errors")
knitr::opts_chunk$set(echo = TRUE)
source("sim_dgp_fn.R")
source("sim_montecarlo_fn.R")
source("sim_final_fn.R")
set.seed(42)
n <- c(30, 100, 300)
T <- c(12, 30)
beta <- c(0.5, 0.5)
DGPs <- c("K1", "K2", "K3", "K4", "E1")
# Create an empty list to store the results
all_results_bT <- list()
# Iterate over the combinations of T, n, and nsim
for (T_val in T) {
for (n_val in n) {
# Determine the value of nsim based on the current n
nsim_val <- ifelse(n_val == 300, 500, 1000)
# Iterate over the DGP types
for (DGP_type in DGPs) {
# Run the doMonteCarlo function for the current combination
results <- doMonteCarlo(nsim_val, T_val, n_val, beta, DGP_type, endogenous = TRUE, error = "homo", rho = 0.5)
# Create a label for the current combination
label <- paste0("T", T_val, "_n", n_val, "_nsim", nsim_val, "_", DGP_type)
# Store the results in the list with the label
all_results_bT[[label]] <- results
}
}
}
source("sim_dgp_fn.R")
source("sim_montecarlo_fn.R")
n <- 30
T <- 12
beta <- c(0.5,0.5)
nsim <- 10
timing <- system.time({results <- doMonteCarlo(nsim, T, n, beta = beta, DGP = "K1" , endogenous = FALSE, error = "hetero_time", rho = 0.5)})
print(timing)
source("sim_dgp_fn.R")
source("sim_montecarlo_fn.R")
n <- 30
T <- 12
beta <- c(0.5,0.5)
nsim <- 10
timing <- system.time({results <- doMonteCarlo(nsim, T, n, beta = beta, DGP = "K1" , endogenous = FALSE, error = "homo", rho = 0.5)})
library(plm)
library(lmtest)
n <- 30
T <- 12
beta <- c(0.5,0.5)
data <- DataGeneratingFunction(T, n, beta = beta, DGP = "K1" , endogenous = FALSE, error = "homo", rho = 0.5)
data_plm <- data[["plm"]]
data_Tn <-  data[["Tn"]]
KSS.fit <- KSS(data_Tn$Y ~ data_Tn$X_1 + data_Tn$X_2 -1, CV = TRUE, consult.dim.crit =  TRUE)
summary(KSS.fit)
plot(summary(KSS.fit))
Eup.fit <- Eup(data_Tn$Y ~ data_Tn$X_1 + data_Tn$X_2 -1, dim.criterion = "PC1", d.max = 6)
summary(Eup.fit)
plot(summary(Eup.fit))
plm_fit <- plm(data_plm$Y ~ data_plm$X_1 + data_plm$X_2 -1, data = data_plm,  model = "within")
summary(plm_fit)
#coeftest(plm_fit, vcov = vcovHC(plm_fit, type = "sss"))
coeftest(plm_fit, vcov=vcovHC(plm_fit,type="HC0",cluster="group"))
source("sim_dgp_fn.R")
source("sim_montecarlo_fn.R")
n <- 30
T <- 12
beta <- c(0.5,0.5)
nsim <- 10
timing <- system.time({results <- doMonteCarlo(nsim, T, n, beta = beta, DGP = "K1" , endogenous = FALSE, error = "homo", rho = 0.5)})
source("sim_dgp_fn.R")
source("sim_montecarlo_fn.R")
n <- 30
T <- 12
beta <- c(0.5,0.5)
nsim <- 10
timing <- system.time({results <- doMonteCarlo(nsim, T, n, beta = beta, DGP = "K1" , endogenous = FALSE, error = "homo", rho = 0.5)})
library(plm)
library(lmtest)
n <- 30
T <- 12
beta <- c(0.5,0.5)
data <- DataGeneratingFunction(T, n, beta = beta, DGP = "K1" , endogenous = FALSE, error = "homo", rho = 0.5)
data_plm <- data[["plm"]]
data_Tn <-  data[["Tn"]]
KSS.fit <- KSS(data_Tn$Y ~ data_Tn$X_1 + data_Tn$X_2 -1, CV = TRUE, consult.dim.crit =  TRUE)
